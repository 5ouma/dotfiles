#!/usr/bin/env zsh

#==================================================[ Clone repository ]==================================================#

if [[ ! -e "$HOME/.dotfiles" ]]; then
  printf "\033[36m%s\033[m %s\n" "info" "Cloning repository into \`~/.dotfiles\`..."
  git clone https://gitfront.io/r/Souma/DAeBcWDhv6Cj/dotfiles.git ~/.dotfiles
  git -C ~/.dotfiles remote set-url origin git@github.com:5ouma/dotfiles.git
  git -C ~/.dotfiles switch -c main && git -C ~/.dotfiles branch -d master
fi

#==================================================[ Settings ]==================================================#

zstyle ":completion:*:commands" rehash 1

#==================================================[ Variables ]==================================================#

[ -z "$dotfiles" ] && declare -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
export -r ZDOTDIR="$HOME/.zsh"

declare doAll=false
declare notSetup=true
declare doneAnything=false
declare nowNum=1
declare -r allNum=$(($(grep -o "echoNumber" "$dotfiles/setup" | wc -l) - 2))

#==================================================[ Functions ]==================================================#

getColor() {
  case "$1" in
    red) echo -n 31 ;;
    green) echo -n 32 ;;
    yellow) echo -n 33 ;;
    blue) echo -n 34 ;;
    cyan) echo -n 36 ;;
    gray) echo -n 90 ;;
  esac
}

printc() {
  declare -r color="$(getColor "$1")"
  [ "$2" = true ] && declare -r isBold=1 || declare -r isBold=0
  printf "\033[%s;%sm%s\033[m" "$isBold" "$color" "$3"
}

printOpt() {
  printf "  %s, %s%s\n" "$(printc green false "-$1")" "$(printc green false "--$2")" "$3"
}

echoAsk() {
  printf "$(printc blue true "ask") %s: " "$1"
}

echoQue() {
  printf "$(printc gray true "question") %s: " "$1"
}

echoInfo() {
  printf "$(printc cyan true "info") %s\n" "$1"
}

echoWarning() {
  printf "$(printc yellow true "warning") %s\n" "$1"
}

echoResult() {
  if [[ $? = 0 ]]; then
    printf "$(printc green false "success") %s\n" "$1"
    doneAnything=true
  else
    printf "$(printc red false "error") %s\n" "$2"
  fi
}

echoNumber() {
  printf "$(printc gray false "[$nowNum/$allNum]") %s\n" "$1"
  ((nowNum++))
}

echoDone() {
  newLine
  print "✨ Setting up successfully!"
}

newLine() {
  echo
}

waitInput() {
  echoAsk "$1 (y/n/other to abort)"
  read -rk 1 run
  newLine
  if [[ "$run" =~ "y|Y" ]]; then
    return 0
  elif [[ "$run" =~ "n|N" ]]; then
    for ((i = 0; i < $2; i++)); do
      ((nowNum++))
    done
    return 1
  else
    if "$doneAnything"; then
      echoDone
    else
      newLine
      echoWarning "Nothing has changed."
    fi
    exec $SHELL -l
  fi
}

waitReturn() {
  print "Press RETURN to continue"
  read -rs
}

makeSymlink() {
  while read -r pack; do
    local homeFile homeDir >/dev/null 2>&1
    homeFile="$2/$(echo "$pack" | perl -pe "s/.*$(basename "$1")\/.*?\///")"
    homeDir=$(dirname "$homeFile")
    if [[ -e "$homeFile" && -n $(diff "$pack" "$homeFile") ]]; then
      mkdir -p "$(dirname "$1")/backup"
      mv "$homeFile" "$(dirname "$1")/backup/"
    fi
    if [[ ! -e "$homeFile" || -n $(diff "$pack" "$homeFile") ]]; then
      mkdir -p "$homeDir"
      ln -s -v "$pack" "$homeDir"
        notSetup=false
    fi
  done < <(find "$1" -type f ! -name ".DS_Store")
}

makeFile() {
  for target in "$@"; do
    if [[ ! -e "$target" ]]; then
      touch "$target"
      print "$target"
        notSetup=false
    fi
  done
}

makeDir() {
  for target in "$@"; do
    if [[ ! -e "$target" ]]; then
      mkdir -p "$target"
      print "$target"
        notSetup=false
    fi
  done
}

setFiles() {
  makeSymlink "$packages" "$HOME"
  makeDir "$HOME/.vim/undo" "$HOME/.ssh/git"
  makeFile "$HOME/.hushlogin"
  if ! "$notSetup"; then
    echoResult "Set these files!" "Setting files is failed."
      sleep 1
  else
    echoWarning "All files are already set."
      sleep 0.5
  fi
}

installLang() {
  if ! (asdf list "$1" >/dev/null 2>&1); then
    echoInfo "Installing $1..."
    asdf plugin-add "$1"
    if "$2"; then
      asdf install "$1" latest
      asdf global "$1" latest
    else
      asdf install "$1"
    fi
    echoResult "Installed $1!" "Installing $1 is failed."
    sleep 1
  else
    echoWarning "$1 is already installed."
    sleep 0.5
  fi
}

uninstallLang() {
  if (asdf list "$1" >/dev/null 2>&1); then
    while read -r ver; do
      asdf uninstall "$1" "$ver"
      asdf plugin remove "$1"
      sed -i "" "/$1/d" "$packages/asdf/.tool-versions"
    done < <(asdf list "$1" | awk '{print $1}')
    echoResult "Uninstalled $1!\n" "Uninstalling $1 is failed.\n"
  else
    echoWarning "$1 doesn't exist."
  fi
}

#==================================================[ Options ]==================================================#

case "$1" in
  "-h" | "--help")
    print "$(printc green false "dotfiles")"
    print "My zsh, vim and other settings, plugins, etc and setup."
    newLine
    print "$(printc yellow false "USAGE:")"
    print "  setup"
    newLine
    print "$(printc yellow false "OPTIONS:")"
    printOpt "h" "help" "    Print help information"
    printOpt "y" "yes" "     Run all configuration"
    printOpt "s" "set" "     Set files to home directory"
    newLine
    print "$(printc yellow false "COMMANDS:")"
    print "  $(printc green false "install") <languages>      Install programming languages with asdf"
    print "  $(printc green false "uninstall") <languages>    Uninstall programming languages with asdf"
    exec $SHELL -l
    ;;

  "-y" | "--yes")
    doAll=true
    ;;

  "-s" | "--set")
    setFiles
    exec $SHELL -l
    ;;

  "install")
    for i in "${@:2}"; do
      installLang "$i" true
    done
    exec $SHELL -l
    ;;

  "uninstall")
    for i in "${@:2}"; do
      uninstallLang "$i"
    done
    exec $SHELL -l
    ;;
esac

#==================================================[ Ask to confirm ]==================================================#

echoAsk "Are you sure to start setup? (y/n)"
read -rq && echo -e "\n" || { newLine && exec $SHELL -l; }

#==================================================[ Homebrew install ]==================================================#

if "$doAll" || waitInput "Install Homebrew." 1; then
  echoNumber "🍺 Installing Homebrew..."
  if ! (type brew >/dev/null 2>&1); then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      waitReturn
    echoResult "Installed Homebrew!" "Installing Homebrew is failed."
    [ "$(uname -m)" = "arm64" ] && eval "$(/opt/homebrew/bin/brew shellenv)"
    brew doctor
      sleep 2
  else
    echoWarning "Homebrew is already installed."
      sleep 1
  fi
fi

newLine

#==================================================[ Files, directories and commands ]==================================================#

if "$doAll" || waitInput "Make symlinks or create terminal files." 1; then
  echoNumber "🔗 The following files and directories will be symlinked or created:"
    setFiles
fi

newLine

#==================================================[ System write ]==================================================#

if "$doAll" || waitInput "Run some \`defaults\` commands." 4; then
  echoNumber "🟩 Changing Launchpad size..."
  if [[ $(defaults read com.apple.dock springboard-columns) != 9 || $(defaults read com.apple.dock springboard-rows) != 8 ]]; then
    defaults write com.apple.dock springboard-columns -int 9
    defaults write com.apple.dock springboard-rows -int 8
    defaults write com.apple.dock ResetLaunchPad -bool TRUE
    echoResult "Changed Launchpad size!" "Changing Launchpad size is failed."
      sleep 1
  else
    echoWarning "Launchpad size is already set up."
      sleep 0.5
  fi

  echoNumber "🔲 Adding spaces on Dock..."
  if [[ ! $(defaults read com.apple.dock persistent-apps) =~ "\"spacer-tile\"" ]]; then
    for ((i = 0; i < 6; i++)); do
      defaults write com.apple.dock persistent-apps -array-add '{tile-type="spacer-tile";}'
    done
    echoResult "Added spaces on Dock!" "Adding spaces on Dock is failed."
      sleep 1
  else
    echoWarning "Space in Dock is already added."
      sleep 0.5
  fi

  echoNumber "📷 Creating a screen capture directory and changing its directory to it..."
  if [[ "$(defaults read com.apple.screencapture location)" != "$HOME/Pictures/Screen Capture" ]]; then
    mkdir -p "$HOME/Pictures/Screen Capture"
    defaults write com.apple.screencapture location "$HOME/Pictures/Screen Capture"
    echoResult "Created screen capture directory and changed its directory!" "Creating screen capture directory and changing its directory is failed."
      sleep 1
  else
    echoWarning "Screen capture directory is already set up."
      sleep 0.5
  fi

  killall Dock
  killall SystemUIServer

  echoNumber "💻 Setting computer name..."
  if [[ ! $(scutil --get ComputerName) =~ $(id -F)\'s ]]; then
    echoQue "What's your computer name?"
    read -r computerName
    declare -r localName
      localName=$(echo "$computerName" | sed -e "s/'//g" -e "s/ /-/g")
    scutil --set ComputerName "$computerName"
      print "computerName: $(sudo scutil --get ComputerName)"
    scutil --set LocalHostName "$localName"
      print "LocalHostName: $(sudo scutil --get LocalHostName)"
    scutil --set HostName "$computerName"
      print "HostName: $(sudo scutil --get HostName)"
    echoResult "Set computer name!" "Setting computer name is failed."
      sleep 1
  else
    echoWarning "Computer name is already set up."
      sleep 0.5
  fi
fi

newLine

#==================================================[ Install apps and more ]==================================================#

if "$doAll" || waitInput "Install packages and apps with Homebrew and more." 9; then
  echoNumber "📲 Installing apps with Homebrew..."
    echoInfo "Opening App Store..."
    echoInfo "Please sign in to App Store."
        sleep 3
      open -a "App Store"
        waitReturn
    if [[ ! -e "/Applications/1Password.app" ]]; then
      echoInfo "Installing 1Password..."
        brew install 1password
      echoInfo "Please sign in to 1Password and save public ssh keys."
          sleep 3
        open -a "1Password"
          waitReturn
    fi
    brew bundle --no-lock --file="$dotfiles/data/Brewfile"
      sleep 1
    if [[ ! -e "/Applications/DaVinci Resolve" ]]; then
      print "Please install DaVinci Resolve."
        sleep 3
      open https://www.blackmagicdesign.com/jp/products/davinciresolve
        waitReturn
    fi
    echoResult "Installed apps!" "Installing apps is failed."
      sleep 1

  echoNumber "🟩 Setting up Launchpad..."
      lporg save -c "$HOME/.temp-launchpad.yaml" >/dev/null 2>&1
    if [[ -n $(diff "$HOME/.temp-launchpad.yaml" "$dotfiles/data/launchpad.yaml") ]]; then
      lporg load -n "$dotfiles/data/launchpad.yaml" >/dev/null 2>&1
      echoResult "Set up Launchpad!" "Setting up Launchpad is failed."
    else
      echoWarning "Launchpad is already set."
    fi
      command rm "$HOME/.temp-launchpad.yaml"
      sleep 1

  echoNumber "📀 Restoring appliaction settings with Mackup..."
    if [[ -e "$HOME/Library/Mobile Documents/com~apple~CloudDocs/Mackup" ]]; then
      mackup restore
      echoResult "Restored app settings!" "Restoring app settings is failed."
    else
      echoWarning "App settings is already restored."
    fi
      sleep 1

  echoNumber "⌨️ Restoring App Shortcuts..."
    if [[ ! "$(defaults read com.apple.universalaccess "com.apple.custommenu.apps")" =~ "\"" ]]; then
      mksei load "$dotfiles/data/keyboard_shortcuts.json"
      echoResult "Restored App Shortcuts!" "Restoring App Shortcuts is failed."
    else
      echoWarning "App Shortcuts is already restored."
    fi
      sleep 1


  echoNumber "🖥 Installing Shell Integration for iTerm2..."
    if [[ ! -e "$ZDOTDIR/.iterm2_shell_integration.zsh" ]]; then
      curl -fsSL https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
      echoResult "Installed Shell Integration!" "Installing Shell Integration is failed."
    else
      echoWarning "Shell Integration is already installed."
    fi
    sleep 1

  echoNumber "💾 Installing programming language with asdf..."
    . /usr/local/opt/asdf/libexec/asdf.sh
    while read -r lang; do
      installLang "$lang" false
    done < <(awk '{print $1}' "$packages/asdf/.tool-versions")
      sleep 1

  echoNumber "🧶 Installing packages with yarn..."
    if [[ ! -e "$HOME/.config/yarn/global/node_modules" ]]; then
      yarn global add
      echoResult "Installed packages!" "Installing packages is failed."
    else
      echoWarning "Packages are already installed."
    fi
      sleep 1

  echoNumber "📝 Installing Vim plugins with Jetpack..."
    [ -z "$VIMRC" ] && export -r VIMRC="$HOME/.vim/.vimrc"
    [ -z "$VIMINIT" ] && export -r VIMINIT="source $VIMRC"
    vim +qall
    echoResult "Installed plugins!" "Installing plugins is failed."
      sleep 1

  echoNumber "🐙 Settting remote repository to GitHub..."
    if [[ $(git -C "$dotfiles" branch --remotes) =~ "master" ]]; then
      git -C "$dotfiles" fetch --set-upstream origin main && git -C "$dotfiles" reset --hard origin/main && git -C "$dotfiles" remote set-head origin main && git -C "$dotfiles" branch -dr origin/master
      echoResult "Set remote repository!" "Settings remote repository is failed."
    else
      echoWarning "Remote repository is already set."
    fi
      sleep 1
fi

#==================================================[ Done! ]==================================================#

if "$doneAnything"; then
  echoDone
else
  newLine
  echoWarning "Nothing has changed."
fi
