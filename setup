#!/usr/bin/env zsh

set -eu

#==================================================[ Variables ]==================================================#

declare -r githuburl="https://github.com/5ouma/dotfiles.git"
[ -z "${ZDOTDIR:-}" ] && export -r ZDOTDIR="$HOME/.config/zsh"
[ -z "${dotfiles:-}" ] && export -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
[ -z "${datas:-}" ] && export -r datas="$dotfiles/datas"

declare executed=false
declare gothrough=false

#==================================================[ Functions ]==================================================#

# Actions
getGum() {
  declare -r gumurl="https://github.com/charmbracelet/gum/releases/latest/download/gum_0.10.0_$(uname)_$(uname -m).tar.gz"
  declare -r gumthemeurl="https://raw.githubusercontent.com/5ouma/dotfiles/HEAD/datas/blue.json"

  if (! type gum >/dev/null 2>&1); then
    printf "  üööüí® Now delivering..."
    curl -sL "$gumurl" | tar -zxC "$TMPDIR" "gum" && declare -gr gumcom="$TMPDIR/gum"
    printf "\r                        "
  else
    gumcom=$(which gum) && declare -gr gumcom
  fi

  if [[ ! -f "$datas/blue.json" ]]; then
    gumtheme=$(curl -s "$gumthemeurl") && declare -gr gumtheme
  else
    gumtheme=$(cat "$datas/${gumthemeurl/*\//}") && declare -gr gumtheme
  fi
}
getGum

gum() {
  case $1 in
  confirm) $gumcom confirm "$2" --selected.background="#027AFF" --affirmative="$3" --negative="$4" ;;
  format) $gumcom format --theme=<(echo -E "$gumtheme") "${@:2}" ;;
  input) $gumcom input --header="$2" --placeholder="$3" "${@:4}" ;;
  spin) $gumcom spin --spinner.foreground="#027AFF" --title="$2" "${@:3}" ;;
  style) $gumcom style --foreground="$2" "${@:3}" ;;
  executed)
    echo && $gumcom format "‚úÖ Done!"
    executed=true
    ;;
  esac
}

getdot() {
  if [[ ! -d "$dotfiles" ]]; then
    gum spin "Cloning the repository into \`~/.dotfiles\`..." -- git clone "$githuburl" "$dotfiles"
  else
    gum spin "Pulling the dotfiles repository..." -- git -C "$dotfiles" pull
  fi
}

checkSym() {
  declare -Ag packs
  while read -r pack; do
    declare file="$HOME/${pack#"$packages"/*/}"
    if [[ ! -f "$file" ]] || (! diff "$pack" "$file" >/dev/null 2>&1); then
      packs[$file]=$pack
    fi
  done < <(find "$packages" -type f ! -name ".DS_Store")
  ((${#packs} > 0))
}

mkSym() {
  # shellcheck disable=SC2296
  for file in "${(k)packs[@]}"; do
    mkdir -p "$(dirname "$file")"
    ln -is "${packs[$file]}" "$file"
    echo "- $(gum style 6 "~${file#~}")"
  done | gum format
}

# Utilities
helpMsg() {
  gum format <<EOM
## Usage: setup

> üíª The most minimal and powerful dotfiles ever.

## Flags:
-  -h, --help    Print help information
-  -y, --yes     Start without confirming
-  -s, --set     Set files to home directory
EOM
}

exitNonDarwin() {
  if [[ "$(uname)" != "Darwin" ]]; then
    gum format <<EOM
> **$(gum style 3 "Warning")**
> This operation is macOS only.
EOM
    exit 1
  fi
}

#==================================================[ Welcome ]==================================================#

if [[ ! -x $0 ]]; then
  gum format <<EOM
# Welcome to üíª dotfiles setup!
> https://github.com/5ouma/dotfiles
---
EOM
fi

#==================================================[ Flags ]==================================================#

if [[ $# = 0 ]]; then
  exitNonDarwin
else
  case "$1" in
  "-h" | "--help")
    helpMsg
    exit
    ;;
  "-y" | "--yes")
    exitNonDarwin
    gothrough=true
    ;;
  "-s" | "--set")
    getdot && checkSym && mkSym
    exit
    ;;
  *)
    gum format <<EOM
> **$(gum style 1 "Error")**
> Unknown flag $1
EOM
    helpMsg
    exit 1
    ;;
  esac
fi

#==================================================[ Preperations ]==================================================#

# Ask to confirm
if (! $gothrough); then
  gum confirm "Let's start setup!" "Yes!" "No" || exit 1
fi

# Clone / Pull the repository
getdot

# Zsh setting
zstyle ":completion:*:commands" rehash 1

#==================================================[ Homebrew ]==================================================#

if (! type brew >/dev/null 2>&1); then
  gum format "## üç∫ Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  [ "$(uname -m)" = "x86_64" ] && eval "$(/usr/local/bin/brew shellenv)"
  [ "$(uname -m)" = "arm64" ] && eval "$(/opt/homebrew/bin/brew shellenv)"
  brew doctor
  gum executed
fi

#==================================================[ Configs ]==================================================#

mkdir -p "$HOME/.cache" "$HOME/.vim/undo" "$HOME/.ssh/git"
touch "$HOME/.hushlogin"
if checkSym; then
  gum format "## üîó Symlinking files..."
  mkSym
  gum executed
fi

if [[ ! -f "$HOME/.ssh/git/github.pub" || ! -f "$HOME/.ssh/git/github-school.pub" ]]; then
  gum format "## üìÉ Downloading SSH public keys..."
  curl -s https://github.com/5ouma.keys | head -n 1 >"$HOME/.ssh/git/github.pub"
  curl -s https://github.com/6ouma.keys | head -n 1 >"$HOME/.ssh/git/github-school.pub"
  gum executed
fi

#==================================================[ defaults ]==================================================#

if (! defaults read com.apple.dock springboard-columns >/dev/null 2>&1) || [[ $(defaults read com.apple.dock springboard-columns) != 9 || $(defaults read com.apple.dock springboard-rows) != 8 ]]; then
  gum format "## üñº Changing Launchpad size..."
  defaults write com.apple.dock springboard-columns -int 9
  defaults write com.apple.dock springboard-rows -int 8
  defaults write com.apple.dock ResetLaunchPad -bool TRUE
  gum executed
fi

killall Dock
declare -r spacecount=$((5 - $(defaults read com.apple.dock persistent-apps | grep "small-spacer-tile" -c)))
if ((spacecount > 0)); then
  gum format "## üö• Adding spaces on Dock..."
  for ((i = 0; i < spacecount; i++)); do
    defaults write com.apple.dock persistent-apps -array-add '{tile-type="small-spacer-tile";}'
  done
  gum executed
fi

if (! defaults read com.apple.screencapture location >/dev/null 2>&1) || [[ "$(defaults read com.apple.screencapture location)" != "$HOME/Pictures/Screen Capture" ]]; then
  gum format "## üì∑ Changing screen capture path..."
  mkdir -p "$HOME/Pictures/Screen Capture"
  defaults write com.apple.screencapture location "$HOME/Pictures/Screen Capture"
  gum executed
fi

killall Dock
killall SystemUIServer

modelname="$(system_profiler SPHardwareDataType | grep "Model Name" | sed "s/.*: //")" && declare -r modelname
computername="$(id -F)'s $modelname" localhostname="$(id -F)s-${modelname// /-}" && declare -r computername localhostname
if [[ "$(scutil --get ComputerName)" != "$computername" || "$(scutil --get HostName)" != "$computername" || "$(scutil --get LocalHostName)" != "$localhostname" ]]; then
  gum format "## üñ• Setting computer name..."
  gum spin "Setting ComputerName..." -- scutil --set ComputerName "$computername"
  gum spin "Setting HostName..." -- scutil --set HostName "$computername"
  gum spin "Setting LocalHostName..." -- scutil --set LocalHostName "$localhostname"
  sudo -v
  gum format <<EOM
- ComputerName : $(gum style 6 "$(scutil --get ComputerName)")
- HostName : $(gum style 6 "$(scutil --get HostName)")
- LocalHostName : $(gum style 6 "$(sudo scutil --get LocalHostName)")
EOM
  gum executed
fi

#==================================================[ Apps ]==================================================#

if [[ $(gum spin "Satisfying Brewfile's dependencies..." --show-output -- brew bundle check --no-upgrade --file="$datas/Brewfile") != "The Brewfile's dependencies are satisfied." ]]; then
  gum format "## üì≤ Installing apps and commands..."
  brew bundle install --no-lock --no-upgrade --file="$datas/Brewfile"
  gum executed
fi
if [[ ! -d "/Applications/DaVinci Resolve" ]]; then
  gum format "### üé® Please install DaVinci Resolve."
  sleep 2
  open "https://www.blackmagicdesign.com/jp/products/davinciresolve"
  gum confirm "Continue when you done." "Done" ""
  gum executed
fi

lporg save -c "$TMPDIR/launchpad.yaml" >/dev/null 2>&1
if (! diff "$datas/launchpad.yaml" "$TMPDIR/launchpad.yaml" >/dev/null 2>&1); then
  gum format "## üñº Setting up Launchpad..."
  gum spin "Running \`lporg load\`" -- lporg load -n "$datas/launchpad.yaml"
  gum executed
fi

if [[ -n "$(mackup -n backup)" ]]; then
  gum format "## üíæ Restoring appliaction settings..."
  mackup restore
  gum executed
fi

if (! defaults read com.apple.universalaccess "com.apple.custommenu.apps" >/dev/null 2>&1); then
  gum format "## ‚å®Ô∏è Restoring App Shortcuts..."
  gum spin "Running \`mksei load\`" -- mksei load "$datas/keyboard_shortcuts.json"
  gum executed
fi

eval "$(rtx activate -q zsh)"
if [[ "$(rtx ls)" =~ "missing" ]]; then
  gum format "## üìº Installing programming languages..."
  rtx install
  gum executed
fi

if [[ ! -d "$HOME/.vim/pack/jetpack/opt" ]]; then
  gum format "## üñå Installing Vim plugins..."
  [ -z "${VIMRC:-}" ] && export -r VIMRC="$HOME/.vim/.vimrc"
  [ -z "${VIMINIT:-}" ] && export -r VIMINIT="source $VIMRC"
  vim +Jetpack +qall
  gum executed
fi

#==================================================[ Done! ]==================================================#

if ($executed); then
  gum format "# üéâ Setup complete!"
else
  gum format "# üßä Nothing has changed."
fi
