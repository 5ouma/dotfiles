#!/usr/bin/env zsh

#==================================================[ Variables ]==================================================#

declare -r gitRepo="https://github.com/5ouma/dotfiles.git"
[ -z "$ZDOTDIR" ] && export -r ZDOTDIR="$HOME/.zsh"
[ -z "$dotfiles" ] && declare -r dotfiles="$HOME/.dotfiles"
declare -r packageDir="$dotfiles/packages"
declare -r scriptDir="$dotfiles/scripts"
declare -r preferences=("homebrew" "files" "defaults" "apps")
declare -r data="$dotfiles/data"

declare doAll=false
declare notSetup=true
declare doneAnything=false
declare nowNum=1
[ -e "$HOME/.dotfiles" ] && declare -r allNum=$(($(grep -o "echoNumber" "$dotfiles/scripts"/* | wc -l)))

#==================================================[ Functions ]==================================================#

getColor() {
  case "$1" in
  red) echo -n 31 ;;
  green) echo -n 32 ;;
  yellow) echo -n 33 ;;
  blue) echo -n 34 ;;
  cyan) echo -n 36 ;;
  gray) echo -n 90 ;;
  esac
}

printc() {
  local -r color="$(getColor "$1")"
  [ "$2" = true ] && local -r isBold=1 || local -r isBold=0
  printf "\033[%s;%sm%s\033[m" "$isBold" "$color" "$3"
}

# echo with message
echoAsk() {
  printf "$(printc blue true "ask") %s: " "$1"
}

echoQue() {
  printf "$(printc gray true "question") %s: " "$1"
}

echoInfo() {
  printf "$(printc cyan true "info") %s\n" "$1"
}

echoWarning() {
  printf "$(printc yellow true "warning") %s\n" "$1"
}

echoNumber() {
  printf "$(printc gray false "[$nowNum/$allNum]") %s\n" "$1"
  ((nowNum++))
}

echoResult() {
  if [[ $? = 0 ]]; then
    printf "$(printc green false "success") %s\n" "$1"
    doneAnything=true
  else
    printf "$(printc red false "error") %s\n" "$2"
  fi
}

echoDone() {
  if "$doneAnything"; then
    print "âœ¨ Setting up successfully!"
  else
    echoWarning "Nothing has changed."
  fi
}

newLine() {
  echo
}

# wait user input
waitInput() {
  echoAsk "$1 (y/n/other to abort)"
  read -rk 1 run
  newLine
  if [[ "$run" =~ "y|Y" ]]; then
    return 0
  elif [[ "$run" =~ "n|N" ]]; then
    ((nowNum += $(grep -o "echoNumber" "$2" | wc -l)))
    return 1
  else
    newLine
    echoDone
    exit
  fi
}

waitReturn() {
  print "Press RETURN to continue"
  read -rs
}

#==================================================[ Flags ]==================================================#

case "$1" in
"-h" | "--help")
  command cat <<EOF
Usage: setup

ðŸ’» The most minimal and powerful dotfiles ever

Flags:
  -h, --help    Print help information
  -y, --yes     Run all configuration
  -s, --set     Set files to home directory
EOF
  exit
  ;;

"-y" | "--yes")
  doAll=true
  ;;

"-s" | "--set")
  source "$scriptDir/files.zsh" true
  exit
  ;;
esac

#==================================================[ Operations ]==================================================#

# Zsh setting
zstyle ":completion:*:commands" rehash 1

# Ask to confirm
echoAsk "Are you sure to start setup? (y/n)"
read -rq && newLine || {
  newLine
  exit
}

# Clone repository
if [[ ! -e "$HOME/.dotfiles" ]]; then
  echoInfo "Cloning repository into \`~/.dotfiles\`..."
  git clone -q "$gitRepo" "$dotfiles"
  declare -r allNum=$(($(grep -o "echoNumber" "$dotfiles/scripts"/* | wc -l)))
fi
newLine

# Apply preference
for script in "${preferences[@]}"; do
  source "$scriptDir/$script.zsh" false
  newLine
done

# Done!
echoDone
