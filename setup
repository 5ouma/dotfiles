#!/usr/bin/env zsh

trap '[ -e "$dir" ] && rm -r "$dir"' EXIT

#==================================================[ Variables ]==================================================#

declare -r githuburl="https://github.com/5ouma/dotfiles.git"
[ -z "$ZDOTDIR" ] && export -r ZDOTDIR="$HOME/.zsh"
[ -z "$dotfiles" ] && export -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
[ -z "$datas" ] && export -r datas="$dotfiles/datas"

declare executed=false
declare gothrough=false

#==================================================[ Functions ]==================================================#

getGum() {
  declare -r ver="0.9.0"
  declare -r url="https://github.com/charmbracelet/gum/releases/download/v$ver/gum_${ver}_$(uname)_$(uname -m).tar.gz"
  declare -r jsonurl="https://raw.githubusercontent.com/5ouma/dotfiles/HEAD/datas/blue.json"
  declare -r json="$(basename $jsonurl)"
  declare -gr dir="$HOME/.cache/gum"

  if ! (type gum >/dev/null 2>&1); then
    printf "  🚚💨 now delivering..."
    mkdir -p "$dir" && curl -sL "$url" | tar -x -C "$dir" && curl -sL "$jsonurl" -o "$dir/$json"
    printf "\r  🏠 📦 arrived!        "
    declare -gr gumcom="$dir/gum"
    declare -gr gumtheme="$dir/$json"
  else
    # shellcheck disable=SC2155
    declare -gr gumcom="$(which gum)"
    declare -gr gumtheme="$datas/$json"
  fi
}
getGum

gum() {
  case $1 in
  confirm) $gumcom confirm --selected.background="#027AFF" --affirmative="Yes!" --negative="Skip" "${@:2}" ;;
  format) $gumcom format --theme="$gumtheme" "${@:2}" ;;
  input) $gumcom input --header="$2" --placeholder="$3" "${@:4}" ;;
  spin) $gumcom spin --spinner.foreground="#027AFF" --title="$2" "${@:3}" ;;
  executed)
    echo && $gumcom format "✅ Done!"
    executed=true
    ;;
  esac
}

cyan() {
  printf "\033[36m%s\033[m" "$@"
}

chsym() {
  typeset -ag packs files
  declare -g num=0
  while read -r pack; do
    declare file="$HOME/${pack#"$packages"/*/}"
    if [[ ! -e "$file" || -n $(diff "$pack" "$file") ]]; then
      packs+=("$pack")
      files+=("$file")
      ((num++))
    fi
  done < <(find "$packages" -type f ! -name ".DS_Store")
}

mksym() {
  for ((i = 1; i <= num; i++)); do
    mkdir -p "$(dirname "${files[i]}")"
    ln -is "${packs[i]}" "${files[i]}"
    echo "- $(cyan "~${files[i]#~}")"
  done | gum format
}

#==================================================[ Flags ]==================================================#

case "$1" in
"-h" | "--help")
  gum format <<EOM
## Usage: setup

> 💻 The most minimal and powerful dotfiles ever.

## Flags:
-  -h, --help    Print help information
-  -y, --yes     Start without confirming
-  -s, --set     Set files to home directory
EOM
  exit
  ;;
"-y" | "--yes")
  gothrough=true
  ;;
"-s" | "--set")
  chsym && mksym
  exit
  ;;
esac

#==================================================[ Preperations ]==================================================#

# Display welcome message
if [[ "$(dirname "$0")" != "$dotfiles" ]]; then
  gum format <<EOM
# Welcome to 💻 dotfiles setup!
> https://github.com/5ouma/dotfiles
EOM
fi

# Ask to confirm
if ! $gothrough; then
  gum confirm "Let's start setup!" --affirmative="Yes!" --negative="No" || exit 1
fi

# Clone the repository
if [[ ! -e "$dotfiles" ]]; then
  echo && gum spin "Cloning the repository into \`~/.dotfiles\`..." -- git clone -q "$githuburl" "$dotfiles"
fi

# Zsh setting
zstyle ":completion:*:commands" rehash 1

#==================================================[ Homebrew ]==================================================#

if ! (type brew >/dev/null 2>&1); then
  gum format "## 🍺 Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  [ "$(uname -m)" = "x86_64" ] && eval "$(/usr/local/bin/brew shellenv)"
  [ "$(uname -m)" = "arm64" ] && eval "$(/opt/homebrew/bin/brew shellenv)"
  brew doctor
  gum executed
fi

#==================================================[ Symlink ]==================================================#

mkdir -p "$HOME/.cache" "$HOME/.vim/undo" "$HOME/.ssh/git"
touch "$HOME/.hushlogin"
chsym
if [[ "$num" -gt 0 ]]; then
  gum format "## 🔗 Symlinking files..."
  mksym
  gum executed
fi

#==================================================[ defaults ]==================================================#

if ! (defaults read com.apple.dock springboard-columns >/dev/null 2>&1) || [[ $(defaults read com.apple.dock springboard-columns) != 9 || $(defaults read com.apple.dock springboard-rows) != 8 ]]; then
  gum format "## 🖼 Changing Launchpad size..."
  defaults write com.apple.dock springboard-columns -int 9
  defaults write com.apple.dock springboard-rows -int 8
  defaults write com.apple.dock ResetLaunchPad -bool TRUE
  gum executed
fi

if [[ ! $(defaults read com.apple.dock persistent-apps) =~ "spacer-tile" ]]; then
  gum format "## 🚥 Adding spaces on Dock..."
  for ((i = 0; i < 6; i++)); do
    defaults write com.apple.dock persistent-apps -array-add '{tile-type="spacer-tile";}'
  done
  gum executed
fi

if ! (defaults read com.apple.screencapture location >/dev/null 2>&1) || [[ "$(defaults read com.apple.screencapture location)" != "$HOME/Pictures/Screen Capture" ]]; then
  gum format "## 📷 Changing screen capture path..."
  mkdir -p "$HOME/Pictures/Screen Capture"
  defaults write com.apple.screencapture location "$HOME/Pictures/Screen Capture"
  gum executed
fi

killall Dock
killall SystemUIServer


# shellcheck disable=SC2155
declare -r modelname="$(system_profiler SPHardwareDataType | grep "Model Name" | sed "s/.*: //")"
# shellcheck disable=SC2155
declare -r computername="$(id -F)'s $modelname" localhostname="$(id -F)s-${modelname// /-}"
if [[ "$(scutil --get ComputerName)" != "$computername" ]]; then
  gum format "## 🖥 Setting computer name..."
  gum spin "Setting ComputerName..." -- scutil --set ComputerName "$computername"
  gum spin "Setting HostName..." -- scutil --set HostName "$computername"
  gum spin "Setting LocalHostName..." -- scutil --set LocalHostName "$localhostname"
  while ! (gum input "" "Please input your password to get computer name" --password | sudo --stdin echo >/dev/null 2>&1); do :; done
  gum format <<EOM
- ComputerName : $(cyan "$(sudo scutil --get ComputerName)")
- HostName : $(cyan "$(sudo scutil --get HostName)")
- LocalHostName : $(cyan "$(sudo scutil --get LocalHostName)")
EOM
  gum executed
fi

#==================================================[ Apps ]==================================================#

if [[ ! $(gum spin "Satisfying Brewfile's dependencies..." --show-output -- brew bundle check --file="$datas/Brewfile") = "The Brewfile's dependencies are satisfied." ]]; then
  gum format "## 📲 Installing apps and commands..."
  brew bundle install --no-lock --file="$datas/Brewfile"
  gum executed
fi
if [[ ! -e "/Applications/DaVinci Resolve" ]]; then
  gum format "### 🎨 Please install DaVinci Resolve."
  sleep 2
  open "https://www.blackmagicdesign.com/jp/products/davinciresolve"
  gum confirm "Continue when you done." --affirmative="Done" --negative=""
  gum executed
fi

lporg save -c "$HOME/.cache/launchpad.yaml" >/dev/null 2>&1
if [[ -n $(diff "$datas/launchpad.yaml" "$HOME/.cache/launchpad.yaml") ]]; then
  gum format "## 🖼 Setting up Launchpad..."
  gum spin "running \`lporg load\`" -- lporg load -n "$datas/launchpad.yaml"
  gum executed
fi
rm "$HOME/.cache/launchpad.yaml"

if [[ -n "$(mackup -n backup)" ]]; then
  gum format "## 💾 Restoring appliaction settings..."
  mackup restore
  gum executed
fi

if ! (defaults read com.apple.universalaccess "com.apple.custommenu.apps" >/dev/null 2>&1); then
  gum format "## ⌨️ Restoring App Shortcuts..."
  gum spin "running \`mksei load\`" -- mksei load "$datas/keyboard_shortcuts.json"
  gum executed
fi

eval "$(rtx activate -q zsh)"
if [[ "$(rtx ls)" =~ "missing" ]]; then
  gum format "## 📼 Installing programming languages..."
  rtx install
  gum executed
fi

if [[ ! -e "$HOME/.vim/pack/jetpack/src" ]]; then
  gum format "## 🖌 Installing Vim plugins..."
  [ -z "$VIMRC" ] && export -r VIMRC="$HOME/.vim/.vimrc"
  [ -z "$VIMINIT" ] && export -r VIMINIT="source $VIMRC"
  vim +Jetpack +qall
  gum executed
fi

#==================================================[ Done! ]==================================================#

if ($executed); then
  gum format "# 🎉 Setup complete!"
else
  gum format "# 🧊 Nothing has changed."
fi
