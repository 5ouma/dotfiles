#!/usr/bin/env zsh

set -eu

#==================================================[ Variables ]==================================================#

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

declare -r githubUrl='https://github.com/5ouma/dotfiles.git'
declare -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
declare -r data="$dotfiles/data"
declare -r TMPDIR="${TMPDIR:-"$(mktemp -d)"}"

declare executed=false
declare goThrough=false

#==================================================[ Functions ]==================================================#

# Actions
getGum() {
  declare -r gumUrl="https://github.com/charmbracelet/gum/releases/latest/download/gum_0.11.0_$(uname)_$(uname -m).tar.gz"
  declare -r gumThemeUrl='https://raw.githubusercontent.com/5ouma/dotfiles/HEAD/data/blue.json'

  if (! type gum &>/dev/null); then
    printf '  üööüí® Now delivering...'
    curl -sL "$gumUrl" | tar -zxC "$TMPDIR" 'gum' && declare -gr gumCom="$TMPDIR/gum"
    printf '\r                        '
  else
    gumCom="$(which gum)" && declare -gr gumCom
  fi

  if [[ ! -f "$data/blue.json" ]]; then
    gumTheme=$(curl -s "$gumThemeUrl") && declare -gr gumTheme
  else
    gumTheme=$(cat "$data/${gumThemeUrl/*\//}") && declare -gr gumTheme
  fi
}
getGum

gum() {
  case $1 in
  confirm) $gumCom confirm "$2" --selected.background='27' --affirmative="$3" --negative="$4" ;;
  format) $gumCom format --theme=<(echo -E "$gumTheme") "${@:2}" ;;
  spin) $gumCom spin --spinner.foreground='27' --title="$2" "${@:3}" ;;
  style) $gumCom style --foreground="$2" "${@:3}" ;;
  executed)
    echo && $gumCom format '‚úÖ Done!'
    executed=true
    ;;
  esac
}

getDot() {
  if [[ ! -d "$dotfiles" ]]; then
    # shellcheck disable=SC2016
    gum spin 'Cloning the repository into `~/.dotfiles`...' -- git clone "$githubUrl" "$dotfiles"
  else
    gum spin 'Pulling the dotfiles repository...' -- git -C "$dotfiles" pull
  fi
}

checkSym() {
  declare -Ag packs
  while read -r pack; do
    declare file="${pack#"$packages"/*/}"
    if [[ ! -f "$HOME/$file" ]] || (! diff "$pack" "$HOME/$file" &>/dev/null); then
      packs[$file]=$pack
    fi
  done < <(find "$packages" -type f ! -name '.DS_Store')
  ((${#packs} > 0))
}

mkSym() {
  # shellcheck disable=SC2296
  while read -r file; do
    mkdir -p "$(dirname "$HOME/$file")"
    ln -is "${packs[$file]}" "$HOME/$file"
    # shellcheck disable=SC2088
    echo "- $(gum style 6 "~/$file")"
  done < <(printf "%s\n" "${(k)packs[@]}" | sort) | gum format
}

# Utilities
helpMsg() {
  gum format <<EOM
## Usage: setup

> ‚öôÔ∏è The most minimal and powerful dotfiles ever.

## Flags:
-  -h, --help    Print help information
-  -y, --yes     Start without confirmation
-  -s, --set     Set files to home directory
EOM
}

isDarwin() {
  [ "$(uname)" = 'Darwin' ]
}

confirmNonDarwin() {
  if (! isDarwin); then
    gum format <<EOM
> **$(gum style 3 'Warning')**
> Homebrew requires some dependencies on Linux.
> [](https://docs.brew.sh/Homebrew-on-Linux#requirements)
EOM
    gum confirm 'Are you ready to run setup?' 'Yes!' 'No' || exit 1
  fi
}

#==================================================[ Welcome ]==================================================#

if [[ ! -x $0 ]]; then
  gum format <<EOM
# Welcome to ‚öôÔ∏è dotfiles setup!
> https://github.com/5ouma/dotfiles
---
EOM
fi

#==================================================[ Flags ]==================================================#

if (($# == 0)); then
  confirmNonDarwin
else
  case "$1" in
  '-h' | '--help')
    helpMsg
    exit
    ;;
  '-y' | '--yes') goThrough=true ;;
  '-s' | '--set')
    getDot && checkSym && mkSym
    exit
    ;;
  *)
    gum format <<EOM
> **$(gum style 1 'Error')**
> Unknown flag $1
EOM
    helpMsg
    exit 1
    ;;
  esac
fi

#==================================================[ Preparations ]==================================================#

# Ask to confirm
if (! $goThrough); then
  gum confirm "Let's start setup!" 'Yes!' 'No' || exit 1
fi

# Clone / Pull the repository
getDot

#==================================================[ Homebrew ]==================================================#

if (! type brew &>/dev/null); then
  gum format '## üç∫ Install Homebrew.'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if (isDarwin); then
    [ "$(uname -m)" = 'x86_64' ] && eval "$(/usr/local/bin/brew shellenv)"
    [ "$(uname -m)" = 'arm64' ] && eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
  brew doctor
  gum executed
fi

#==================================================[ Files ]==================================================#

if checkSym; then
  gum format '## üîó Symlink files.'
  mkSym
  gum executed
fi

if [[ ! -f "$HOME/.ssh/git/github.pub" || ! -f "$HOME/.ssh/git/github-school.pub" ]]; then
  gum format '## üìÉ Download SSH public keys.'
  mkdir -p "$HOME/.ssh/git"
  curl -s https://github.com/5ouma.keys | head -n 1 >"$HOME/.ssh/git/github.pub"
  curl -s https://github.com/6ouma.keys | head -n 1 >"$HOME/.ssh/git/github-school.pub"
  gum executed
fi

#==================================================[ Settings ]==================================================#

if (isDarwin); then
  if [[ ! "$(cat /etc/pam.d/sudo)" =~ pam_tid.so ]]; then
    # shellcheck disable=SC2016
    gum format '## üëë Enable Touch ID for `sudo`.'
    cat <<EOF | sudo tee /etc/pam.d/sudo 1>/dev/null
# sudo: auth account password session
auth       sufficient     pam_tid.so
auth       sufficient     pam_smartcard.so
auth       required       pam_opendirectory.so
account    required       pam_permit.so
password   required       pam_deny.so
session    required       pam_permit.so
EOF
    gum executed
  fi

  springboardColumns=$(defaults read com.apple.dock springboard-columns) springboardRows=$(defaults read com.apple.dock springboard-rows) &>/dev/null && declare -r springboard{Columns,Rows}
  if ((springboardColumns != 9 || springboardRows != 8)); then
    gum format '## üöÄ Change the Launchpad size.'
    defaults write com.apple.dock springboard-columns -int 9
    defaults write com.apple.dock springboard-rows -int 8
    gum executed
  fi

  sizeImmutable=$(defaults read com.apple.dock size-immutable) &>/dev/null && declare -r sizeImmutable
  if ((sizeImmutable != 1)); then
    gum format '## üö• Make Dock size immutable.'
    defaults write com.apple.dock size-immutable -bool true
    gum executed
  fi

  screenCaptureLocation="$(defaults read com.apple.screencapture location)" &>/dev/null && declare -r screenCaptureLocation
  declare -r screenCaptures="$HOME/Pictures/Screen Captures"
  if [[ "$screenCaptureLocation" != "$screenCaptures" ]]; then
    gum format '## üì∑ Change screen capture path.'
    mkdir -p "$screenCaptures"
    defaults write com.apple.screencapture location "$screenCaptures"
    gum executed
  fi

  killall Dock
  killall SystemUIServer

  modelName="$(system_profiler SPHardwareDataType | grep 'Model Name' | sed "s/.*: //")" && declare -r modelName
  computerName="$(id -F)'s $modelName" localHostName="$(id -F)s-${modelName// /-}" && declare -r computerName localHostName
  if [[ "$(scutil --get ComputerName)" != "$computerName" || "$(scutil --get HostName)" != "$computerName" || "$(scutil --get LocalHostName)" != "$localHostName" ]]; then
    gum format '## üíª Set the computer name.'
    gum spin 'Setting ComputerName...' -- scutil --set ComputerName "$computerName"
    gum spin 'Setting HostName...' -- scutil --set HostName "$computerName"
    gum spin 'Setting LocalHostName...' -- scutil --set LocalHostName "$localHostName"
    sudo -v
    gum format <<EOM
- ComputerName : $(gum style 6 "$(scutil --get ComputerName)")
- HostName : $(gum style 6 "$(scutil --get HostName)")
- LocalHostName : $(gum style 6 "$(sudo scutil --get LocalHostName)")
EOM
    gum executed
  fi
fi

#==================================================[ Apps ]==================================================#

(! isDarwin) && export HOMEBREW_BUNDLE_BREW_SKIP='5ouma/formula/mksei blacktop/tap/lporg'
if (! gum spin "Satisfying Brewfile's dependencies..." -- brew bundle check --no-upgrade --file="$data/Brewfile"); then
  gum format '## üì≤ Install commands and apps.'
  brew bundle install --no-lock --no-upgrade --file="$data/Brewfile"
  gum executed
fi
if [[ "$SHELL" != "$(which zsh)" ]]; then
  gum format '### üêö Change login shell to Zsh.'
  which zsh | sudo tee -a /etc/shells 1>/dev/null
  chsh -s "$(which zsh)"
  gum executed
fi
if (isDarwin) && [[ ! -d '/Applications/DaVinci Resolve' ]]; then
  gum format '### üé® Please install DaVinci Resolve.'
  sleep 2
  open 'https://www.blackmagicdesign.com/jp/products/davinciresolve'
  gum confirm 'Continue when you done.' 'Done' ''
  gum executed
fi

if (isDarwin); then
  lporg save -c="$TMPDIR/lporg.yml" &>/dev/null
  if (! diff "$data/lporg.yml" "$TMPDIR/lporg.yml" &>/dev/null); then
    gum format '## üöÄ Restore Launchpad and Dock.'
    # shellcheck disable=SC2016
    gum spin 'Running `lporg load`...' -- lporg load -nyc="$data/lporg.yml"
    gum executed
  fi
fi

if (isDarwin) && [[ -n "$(mackup -n backup 2>/dev/null)" && $? ]]; then
  gum format '## üíæ Restore application settings.'
  mackup restore
  gum executed
fi

if (isDarwin && ! defaults read com.apple.universalaccess com.apple.custommenu.apps &>/dev/null); then
  gum format '## ‚å®Ô∏è Restore App Shortcuts.'
  # shellcheck disable=SC2016
  gum spin 'Running `mksei load`...' -- mksei load "$data/keyboard_shortcuts.json"
  gum executed
fi

if [[ ! -f "$XDG_CONFIG_HOME/git/hooks/pre-commit" ]]; then
  gum format '## üö∏ Generate a Git Hook for pre-commit.'
  pre-commit init-templatedir "$XDG_CONFIG_HOME/git" -c="$data/pre-commit.yml" | sed -n 1p
  gum executed
fi

eval "$(rtx activate -q zsh)"
if [[ -n "$(rtx ls --missing)" ]]; then
  gum format '## üìº Install programming languages.'
  rtx install
  gum executed
fi

if [[ ! -d "$XDG_DATA_HOME/vim/pack/jetpack/opt" ]]; then
  gum format '## üñå Install Vim plugins.'
  export MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
  export VIMINIT="source $MYVIMRC"
  vim +Jetpack +qall
  gum spin 'Building a binary of vim-lumen...' -- vim +qall
  gum executed
fi

#==================================================[ Done! ]==================================================#

if ($executed); then
  gum format '# üéâ Setup completed!'
else
  gum format '# üßä Nothing has changed.'
fi
