#!/usr/bin/env zsh

set -eu

#==================================================[ Variables ]==================================================#

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

declare -r githubUrl='https://github.com/5ouma/dotfiles'
declare -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
declare -r data="$dotfiles/data"
declare -r TMPDIR="${TMPDIR:-"$(mktemp -d)"}"
declare -r GIT_REF="${GITHUB_HEAD_REF:-main}"

declare executed=false
declare goThrough=false

#==================================================[ Functions ]==================================================#

# Actions
getGum() {
  declare -r gumUrl="https://github.com/charmbracelet/gum/releases/download/v0.12.0/gum_0.12.0_$(uname)_$(uname -m).tar.gz"
  declare -r gumThemeUrl="https://raw.githubusercontent.com/5ouma/dotfiles/$GIT_REF/data/blue.json"

  if (! type gum &>/dev/null); then
    printf '  üööüí® Now delivering...'
    curl -sL "$gumUrl" | tar -zxC "$TMPDIR" 'gum' && alias gumCom='$TMPDIR/gum'
    printf '\r                        '
  else
    alias gumCom='$(which gum)'
  fi

  if [[ ! -f "$data/blue.json" ]]; then
    gumTheme=$(curl -s "$gumThemeUrl") && declare -gr gumTheme
  else
    gumTheme=$(cat "$data/${gumThemeUrl/*\//}") && declare -gr gumTheme
  fi
} && getGum

gum() {
  case $1 in
  confirm) gumCom confirm "$2" --selected.background='27' --affirmative="$3" --negative="$4" ;;
  format) gumCom format --theme=<(echo -E "$gumTheme") "${@:2}" ;;
  run)
    if (tty &>/dev/null); then
      gumCom spin --spinner.foreground='27' --title="$2" -- "${@:4}"
    else
      echo && gumCom log --level='info' "$2"
      "${@:4}"
    fi
    ;;
  style) gumCom style --foreground="$2" "${@:3}" ;;
  executed)
    echo -en '\n  ' && gumCom format '‚úÖ Done!'
    executed=true
    ;;
  skipped) echo -en '\n  ' && gumCom format 'üü° Skipped' ;;
  esac
}

getDot() {
  if [[ ! -d "$dotfiles" ]]; then
    # shellcheck disable=SC2016
    gum run 'Cloning the repository into `~/.dotfiles`...' -- git clone "$githubUrl" -b "$GIT_REF" "$dotfiles"
  else
    gum run 'Pulling the dotfiles repository...' -- git -C "$dotfiles" pull
  fi
}

checkSym() {
  declare -Ag packs
  while read -r pack; do
    declare file="${pack#"$packages"/*/}"
    if [[ ! -f "$HOME/$file" ]] || (! diff "$pack" "$HOME/$file" &>/dev/null); then
      packs[$file]=$pack
    fi
  done < <(find "$packages" -type f ! -name '.DS_Store')
  ((${#packs} > 0))
}

mkSym() {
  # shellcheck disable=SC2296
  while read -r file; do
    mkdir -p "$(dirname "$HOME/$file")"
    if [[ -f "$HOME/$file" ]]; then
      mkdir -p "$HOME/.backup"
      mv "$HOME/$file" "$HOME/.backup/$(date +'%H%M%S')_$(basename "$file")"
    fi
    ln -s "${packs[$file]}" "$HOME/$file"
    # shellcheck disable=SC2088
    echo "- $(gum style 6 "~/$file")"
  done < <(printf "%s\n" "${(k)packs[@]}" | sort) | gum format
}

# Utilities
run() {
  gum format "$2"
  (${3:-false} && ! isDarwin) && eval 'declare SETUP_SKIP_$1=true'
  if (eval '${SETUP_SKIP_'"$1:-false}"); then
    gum skipped
    return
  fi
  eval '$1'
}

isDarwin() {
  [ "$(uname)" = 'Darwin' ]
}

helpMsg() {
  gum format <<EOM
## Usage: setup

> ‚öôÔ∏è The most minimal and powerful dotfiles ever.

## Flags:
-  -h, --help    Print help information
-  -y, --yes     Start without confirmation
-  -s, --set     Set files to home directory
EOM
}

errMsg() {
  declare -r stat=$1 func="${2/"$HOME"/~}" line=$3
  gum format <<EOM
> **$(gum style 1 'Error')**
> Unknown error has occurred!

> - Status:           $stat
> - File or Function: $func
> - Line Number:      $line
> - Process ID:       $$
EOM
} && trap 'errMsg $? "$0" $LINENO' ERR

#==================================================[ Welcome ]==================================================#

if [[ ! -x $0 ]]; then
  gum format <<EOM
# Welcome to ‚öôÔ∏è dotfiles setup!
> $githubUrl
---
EOM
fi

#==================================================[ Flags ]==================================================#

if (($# == 0)); then
  if (! isDarwin); then
    gum format <<EOM
> **$(gum style 3 'Warning')**
> Homebrew requires some dependencies on Linux.
> [](https://docs.brew.sh/Homebrew-on-Linux#requirements)
EOM
    gum confirm 'Are you ready to run setup?' 'Yes!' 'No' || exit 1
  fi
else
  case "$1" in
  '-h' | '--help')
    helpMsg
    exit
    ;;
  '-y' | '--yes')
    goThrough=true
    export NONINTERACTIVE=1
    ;;
  '-s' | '--set')
    getDot && checkSym && mkSym
    exit
    ;;
  *)
    gum format <<EOM
> **$(gum style 1 'Error')**
> Unknown flag $1
EOM
    helpMsg
    exit 1
    ;;
  esac
fi

#==================================================[ Preparations ]==================================================#

# Ask to confirm
if (! $goThrough); then
  gum confirm "Let's start setup!" 'Yes!' 'No' || exit 1
fi

# Clone / Pull the repository
getDot

#==================================================[ Homebrew ]==================================================#

installHomebrew() {
  if (! type brew &>/dev/null); then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if (isDarwin); then
      [ "$(uname -m)" = 'x86_64' ] && eval "$(/usr/local/bin/brew shellenv)"
      [ "$(uname -m)" = 'arm64' ] && eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
    gum executed
  else
    gum skipped
  fi
} && run 'installHomebrew' '## üç∫ Install Homebrew'

#==================================================[ Files ]==================================================#

setSymlink() {
  if checkSym; then
    mkSym
    gum executed
  else
    gum skipped
  fi
} && run 'setSymlink' '## üîó Symlink files'

downloadSshKey() {
  if [[ ! -f "$HOME/.ssh/git/github.pub" || ! -f "$HOME/.ssh/git/github-school.pub" ]]; then
    mkdir -p "$HOME/.ssh/git"
    curl -s https://github.com/5ouma.keys | head -n 1 >"$HOME/.ssh/git/github.pub"
    curl -s https://github.com/6ouma.keys | head -n 1 >"$HOME/.ssh/git/github-school.pub"
    gum executed
  else
    gum skipped
  fi
} && run 'downloadSshKey' '## üìÉ Download SSH public keys'

#==================================================[ Settings ]==================================================#

# shellcheck disable=SC2016
enableTouchID() {
  if [[ ! "$(cat /etc/pam.d/sudo)" =~ pam_tid.so ]]; then
    cat <<EOF | sudo tee /etc/pam.d/sudo >/dev/null
# sudo: auth account password session
auth       sufficient     pam_tid.so
auth       sufficient     pam_smartcard.so
auth       required       pam_opendirectory.so
account    required       pam_permit.so
password   required       pam_deny.so
session    required       pam_permit.so
EOF
    gum executed
  else
    gum skipped
  fi
} && run 'enableTouchID' '## üëë Enable Touch ID for `sudo`' true

changeLaunchpadSize() {
  declare -r springboardColumns=$(defaults read com.apple.dock springboard-columns) springboardRows=$(defaults read com.apple.dock springboard-rows) &>/dev/null
  if [[ $springboardColumns != 9 || $springboardRows != 8 ]]; then
    defaults write com.apple.dock springboard-columns -int 9
    defaults write com.apple.dock springboard-rows -int 8
    gum executed
  else
    gum skipped
  fi
} && run 'changeLaunchpadSize' '## üöÄ Change the Launchpad size' true

makeDockImmutable() {
  declare -r sizeImmutable=$(defaults read com.apple.dock size-immutable) &>/dev/null
  if [[ $sizeImmutable != 1 ]]; then
    defaults write com.apple.dock size-immutable -bool true
    gum executed
  else
    gum skipped
  fi
} && run 'makeDockImmutable' '## üö• Make Dock size immutable' true

changeScreenCapturePath() {
  declare -r screenCaptureLocation="$(defaults read com.apple.screencapture location)" screenCaptures="$HOME/Pictures/Screen Captures" &>/dev/null
  if [[ "$screenCaptureLocation" != "$screenCaptures" ]]; then
    mkdir -p "$screenCaptures"
    defaults write com.apple.screencapture location "$screenCaptures"
    gum executed
  else
    gum skipped
  fi
} && run 'changeScreenCapturePath' '## üì∑ Change screen capture path' true

setComputerName() {
  declare -r modelName="$(system_profiler SPHardwareDataType | grep 'Model Name' | sed 's/.*: //')"
  declare -r computerName="$(id -F)'s $modelName" localHostName="$(id -F)s-${modelName// /-}"
  if [[ "$(scutil --get ComputerName)" != "$computerName" || "$(scutil --get HostName)" != "$computerName" || "$(scutil --get LocalHostName)" != "$localHostName" ]]; then
    gum run 'Setting ComputerName...' -- sudo scutil --set ComputerName "$computerName"
    gum run 'Setting HostName...' -- sudo scutil --set HostName "$computerName"
    gum run 'Setting LocalHostName...' -- sudo scutil --set LocalHostName "$localHostName"
    gum format <<EOM
- ComputerName : $(gum style 6 "$(sudo scutil --get ComputerName)")
- HostName : $(gum style 6 "$(sudo scutil --get HostName)")
- LocalHostName : $(gum style 6 "$(sudo scutil --get LocalHostName)")
EOM
    gum executed
  else
    gum skipped
  fi
} && run 'setComputerName' '## üíª Set the computer name' true

#==================================================[ Apps ]==================================================#

installApps() {
  (! isDarwin) && export HOMEBREW_BUNDLE_BREW_SKIP='5ouma/formula/mksei blacktop/tap/lporg'
  if (! gum run "Satisfying Brewfile's dependencies..." -- brew bundle check --file="$data/Brewfile"); then
    brew update && brew bundle install --no-lock --file="$data/Brewfile"
    gum executed
  else
    gum skipped
  fi
} && run 'installApps' '## üì≤ Install commands and apps'

changeLoginShell() {
  if [[ "$SHELL" != "$(which zsh)" ]]; then
    which zsh | sudo tee -a /etc/shells >/dev/null
    chsh -s "$(which zsh)"
    gum executed
  else
    gum skipped
  fi
} && run 'changeLoginShell' '### üêö Change login shell to Zsh'

installDavinciResolve() {
  if [[ ! -d '/Applications/DaVinci Resolve' ]]; then
    sleep 2
    open 'https://www.blackmagicdesign.com/jp/products/davinciresolve'
    gum confirm 'Continue when you done' 'Done' ''
    gum executed
  else
    gum skipped
  fi
} && run 'installDavinciResolve' '### üé® Please install DaVinci Resolve' true

restoreLaunchpad() {
  lporg save -c="$TMPDIR/lporg.yml" &>/dev/null
  if (! diff "$data/lporg.yml" "$TMPDIR/lporg.yml" &>/dev/null); then
    # shellcheck disable=SC2016
    gum run 'Running `lporg load`...' -- lporg load -nyc="$data/lporg.yml"
    gum executed
  else
    gum skipped
  fi
} && run 'restoreLaunchpad' '## üöÄ Restore Launchpad and Dock' true

restoreAppSettings() {
  if [[ -n "$(mackup -n backup 2>/dev/null)" && $? ]]; then
    mackup restore
    gum executed
  else
    gum skipped
  fi
} && run 'restoreAppSettings' '## üíæ Restore application settings' true

restoreAppShortcuts() {
  if (! defaults read com.apple.universalaccess com.apple.custommenu.apps &>/dev/null); then
    # shellcheck disable=SC2016
    gum run 'Running `mksei load`...' -- mksei load "$data/keyboard_shortcuts.json"
    gum executed
  fi
} && run 'restoreAppShortcuts' '## ‚å®Ô∏è Restore App Shortcuts' true

generateGitHooks() {
  if [[ ! -f "$XDG_CONFIG_HOME/git/hooks/pre-commit" || ! -f "$XDG_CONFIG_HOME/git/hooks/commit-msg" ]]; then
    pre-commit init-templatedir "$XDG_CONFIG_HOME/git" -c="$data/pre-commit.yml" | sed -n 1p
    gitlint --target="$dotfiles" install-hook
    gum executed
  else
    gum skipped
  fi
} && run 'generateGitHooks' '## ü™ù Generate Git Hooks for pre-commit and commit-msg'

installProgrammingLanguages() {
  eval "$(rtx activate -q zsh)"
  if [[ -n "$(rtx ls --missing)" ]]; then
    rtx install
    gum executed
  else
    gum skipped
  fi
} && run 'installProgrammingLanguages' '## üìº Install programming languages'

installVimPlugins() {
  if [[ ! -d "$XDG_DATA_HOME/vim/pack/jetpack/opt" ]]; then
    export MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
    export VIMINIT="source $MYVIMRC"
    vim +Jetpack +qall
    gum run 'Building a binary of vim-lumen...' -- vim +qall
    gum executed
  else
    gum skipped
  fi
} && run 'installVimPlugins' '## üñå Install Vim plugins'

#==================================================[ Done! ]==================================================#

if ($executed); then
  (isDarwin) && killall Dock SystemUIServer
  gum format '# üéâ Setup completed!'
else
  gum format '# üßä Nothing has changed'
fi
