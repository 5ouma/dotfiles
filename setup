#!/usr/bin/env zsh

set -euo pipefail

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

declare -r githubUrl='https://github.com/5ouma/dotfiles'
declare -r dotfiles="$HOME/.dotfiles"
declare -r config="$dotfiles/config"
declare -r data="$dotfiles/data"
declare -r TMPDIR="${TMPDIR:-"$(mktemp -d)"}"
declare -r GIT_REF="${GITHUB_HEAD_REF:-main}"

export GUM_CHOOSE_CURSOR_FOREGROUND='33'
export GUM_CHOOSE_ITEM_FOREGROUND='39'
export GUM_CHOOSE_SELECTED_FOREGROUND='27'
export GUM_CONFIRM_SELECTED_BACKGROUND='27'
export GUM_FORMAT_THEME="$TMPDIR/blue.json"
export GUM_SPIN_SPINNER_FOREGROUND='27'

declare executed=false
declare skipped=false
declare goThrough=false

getGum() {
  declare -r gumVir='0.17.0'
  declare -r gumDir="gum_${gumVir}_$(uname)_$(uname -m)"
  declare -r gumUrl="https://github.com/charmbracelet/gum/releases/download/v$gumVir/$gumDir.tar.gz"
  declare -r gumThemeUrl="https://raw.githubusercontent.com/5ouma/dotfiles/$GIT_REF/data/blue.json"

  # shellcheck disable=SC2139
  if (! type gum &>/dev/null); then
    printf '  üööüí® Now delivering...'
    curl -sL "$gumUrl" | tar --strip-components=1 -zxC "$TMPDIR" "$gumDir/gum" && alias gumCom="$TMPDIR/gum"
    printf '\r                        '
  else
    alias gumCom="$(which gum)"
  fi

  if [[ ! -f "$data/blue.json" ]]; then
    curl -s "$gumThemeUrl"
  else
    cat "$data/${gumThemeUrl/*\//}"
  fi >"$GUM_FORMAT_THEME"
} && getGum

gum() {
  case $1 in
  choose) gumCom choose --no-limit --selected='*' <"$2" ;;
  confirm) gumCom confirm "$2" --affirmative="$3" --negative="$4" ;;
  format) gumCom format "${@:2}" ;;
  run)
    if (tty &>/dev/null); then
      gumCom spin --title="$2" -- "${@:4}"
    else
      echo && gumCom log --level='info' "$2"
      "${@:4}"
    fi
    ;;
  style) gumCom style --foreground="$2" "${@:3}" ;;
  executed)
    echo -en '\n  ' && gumCom format '‚úÖ Done!'
    executed=true
    ;;
  skipped) echo -en '\n  ' && gumCom format 'üü° Skipped' ;;
  esac
}

getDot() {
  if [[ ! -d "$dotfiles" ]]; then
    # shellcheck disable=SC2016
    gum run 'Cloning the repository into `~/.dotfiles`...' -- git clone "$githubUrl" -b "$GIT_REF" "$dotfiles"
  else
    gum run 'Pulling the dotfiles repository...' -- git -C "$dotfiles" pull
  fi
}

checkSym() {
  declare -Ag cfgs
  while read -r cfg; do
    declare file="${cfg#"$config"/*/}"
    if [[ ! -f "$HOME/$file" ]] || (! diff "$cfg" "$HOME/$file" &>/dev/null); then
      cfgs[$file]=$cfg
    fi
  done < <(find "$config" -type f ! -name '.DS_Store')
  ((${#cfgs} > 0))
}

mkSym() {
  # shellcheck disable=SC2296
  while read -r file; do
    mkdir -p "$(dirname "$HOME/$file")"
    if [[ -f "$HOME/$file" || -L "$HOME/$file" ]]; then
      mkdir -p "$HOME/.backup"
      mv "$HOME/$file" "$HOME/.backup/$(date +'%H%M%S')_$(basename "$file")"
    fi
    ln -s "${cfgs[$file]}" "$HOME/$file"
    # shellcheck disable=SC2088
    printf "- \033[36m%s\033[m\n" "~/$file"
  done < <(printf "%s\n" "${(k)cfgs[@]}" | sort) | gum format
  unset cfgs
}

has() {
  type "$1" &>/dev/null
}

alias skip='skipped=true && return'

shouldProceed() {
  ($goThrough || gum confirm 'Proceed?' 'Yes' 'No')
}

run() {
  declare -r func="${1:u}"
  gum format "$2"
  (${3:-false} && ! isDarwin) && eval 'declare SETUP_SKIP_'"$func"'=true'
  if (eval '${SETUP_SKIP_'"$func"':-false}'); then
    gum skipped
    return
  fi

  eval '$1'
  if ($skipped); then
    skipped=false
    gum skipped
  else
    gum executed
  fi
}

isDarwin() {
  [[ "$(uname)" == 'Darwin' ]]
}

helpMsg() {
  gum format <<EOM
## Usage: setup

> ‚öôÔ∏è The most minimal and powerful dotfiles ever.

## Commands:
-  help    Print help information
-  set     Set files to home directory

## Flags:
-  -y, --yes    Start without confirmation
EOM
}

errMsg() {
  declare -r stat=$1 func="${2/"$HOME"/~}" line=$3
  gum format <<EOM
> **$(gum style 1 'Error')**
> Unknown error has occurred!

> - Status:           $stat
> - File or Function: $func
> - Line Number:      $line
> - Process ID:       $$
EOM
} && trap 'errMsg $? "$0" $LINENO' ERR


if [[ ! -x $0 ]]; then
  gum format <<EOM
# Welcome to ‚öôÔ∏è dotfiles setup!
> $githubUrl
---
EOM
fi

if (($# == 0)); then
  if (! isDarwin); then
    gum format <<EOM
> **$(gum style 3 'Warning')**
> Homebrew requires some dependencies on Linux.
> [](https://docs.brew.sh/Homebrew-on-Linux#requirements)
EOM
    gum confirm 'Are you ready to run setup?' 'Yes!' 'No' || exit 1
  fi
else
  case "$1" in
  'help')
    helpMsg
    exit
    ;;
  'set')
    getDot && checkSym && mkSym
    exit
    ;;
  '-y' | '--yes')
    goThrough=true
    export NONINTERACTIVE=1
    ;;
  *)
    gum format <<EOM
> **$(gum style 1 'Error')**
> Unknown flag $1
EOM
    helpMsg
    exit 1
    ;;
  esac
fi

if (! $goThrough); then
  gum confirm "Let's start setup!" 'Yes!' 'No' || exit 1
fi

if (isDarwin && ! xcode-select -p &>/dev/null); then
  xcode-select --install
  gum confirm 'Continue when you done' 'Done' ''
fi

getDot


installHomebrew() {
  if (type brew &>/dev/null || ! shouldProceed); then
    skip
  fi

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if (isDarwin); then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
} && run 'installHomebrew' '## üç∫ Install Homebrew'

setSymlink() {
  if ! checkSym || ! shouldProceed; then
    skip
  fi

  mkSym
} && run 'setSymlink' '## üîó Symlink files'

# shellcheck disable=SC2016
enableTouchID() {
  if [[ -f '/etc/pam.d/sudo_local' ]] || ! shouldProceed; then
    skip
  fi

  sed -e 's/^#auth/auth/' /etc/pam.d/sudo_local.template | sudo tee /etc/pam.d/sudo_local >/dev/null
} && run 'enableTouchID' '## üëë Enable Touch ID for `sudo`' true

changeLaunchpadSize() {
  declare -r springboardColumns="$(defaults read com.apple.dock springboard-columns)" springboardRows="$(defaults read com.apple.dock springboard-rows)" &>/dev/null
  if [[ $springboardColumns == 9 && $springboardRows == 8 ]] || ! shouldProceed; then
    skip
  fi

  defaults write com.apple.dock springboard-columns -int 9
  defaults write com.apple.dock springboard-rows -int 8
  killall Dock
} && run 'changeLaunchpadSize' '## üöÄ Change the Launchpad size' true

makeDockImmutable() {
  declare -r sizeImmutable="$(defaults read com.apple.dock size-immutable)" &>/dev/null
  if [[ "$sizeImmutable" == 1 ]] || ! shouldProceed; then
    skip
  fi

  defaults write com.apple.dock size-immutable -bool true
} && run 'makeDockImmutable' '## üö• Make Dock size immutable' true

disableRedesignedTextCursor() {
  if sudo [ -f '/Library/Preferences/FeatureFlags/Domain/UIKit.plist' ] || ! shouldProceed; then
    skip
  fi

  sudo mkdir -p /Library/Preferences/FeatureFlags/Domain
  sudo /usr/libexec/PlistBuddy -c "Add 'redesigned_text_cursor:Enabled' bool false" /Library/Preferences/FeatureFlags/Domain/UIKit.plist
} && run 'disableRedesignedTextCursor' '## üî§ Disable redesigned text cursor' true

disablePressAndHold() {
  declare -r pressAndHold="$(defaults read -g ApplePressAndHoldEnabled)" &>/dev/null
  if [[ "$pressAndHold" == 0 ]] || ! shouldProceed; then
    skip
  fi

  defaults write -g ApplePressAndHoldEnabled -bool false
} && run 'disablePressAndHold' '## ‚å®Ô∏è Disable press-and-hold for keys' true

changeScreenCapturePath() {
  declare -r screenCaptureLocation="$(defaults read com.apple.screencapture location)" screenCaptures="$HOME/Pictures/Screen Captures" &>/dev/null
  if [[ "$screenCaptureLocation" == "$screenCaptures" ]] || ! shouldProceed; then
    skip
  fi

  mkdir -p "$screenCaptures"
  defaults write com.apple.screencapture location "$screenCaptures"
} && run 'changeScreenCapturePath' '## üì∑ Change screen capture path' true

setComputerName() {
  declare -r userName="$(id -F)" modelName="$(system_profiler SPHardwareDataType | grep 'Model Name' | cut -d ':' -f 2 | xargs)"
  declare -r computerName="$userName's $modelName" localHostName="${userName//./}s-${modelName// /-}"
  if [[ "$(scutil --get ComputerName)" == "$computerName" && "$(scutil --get HostName)" == "$computerName" && "$(scutil --get LocalHostName)" == "$localHostName" ]] || ! shouldProceed; then
    skip
  fi

  gum run 'Setting ComputerName...' -- sudo scutil --set ComputerName "$computerName"
  gum run 'Setting HostName...' -- sudo scutil --set HostName "$computerName"
  gum run 'Setting LocalHostName...' -- sudo scutil --set LocalHostName "$localHostName"
  gum format <<EOM
- ComputerName: $(gum style 6 "$(sudo scutil --get ComputerName)")
- HostName: $(gum style 6 "$(sudo scutil --get HostName)")
- LocalHostName: $(gum style 6 "$(sudo scutil --get LocalHostName)")
EOM
} && run 'setComputerName' '## üíª Set the computer name' true


installApps() {
  (! isDarwin) && export HOMEBREW_BUNDLE_BREW_SKIP='mas trash 5ouma/tap/mksei 5ouma/tap/mli blacktop/tap/lporg lslqtz/formulae/bclm_loop'
  if (gum run "Satisfying Brewfile's dependencies..." -- brew bundle check --file="$data/Brewfile" || ! shouldProceed); then
    skip
  fi

  if ($goThrough); then
    cat "$data/Brewfile"
  else
    gum choose "$data/Brewfile"
  fi >"$TMPDIR/Brewfile"
  brew bundle install --file="$TMPDIR/Brewfile"
  [[ -d '/Applications/Xcode.app' ]] && sudo xcodebuild -license accept || :
} && run 'installApps' '## üì≤ Install commands and apps'

changeLoginShell() {
  if [[ "${SHELL:-''}" == "$(which zsh)" ]] || ! shouldProceed; then
    skip
  fi

  which zsh | sudo tee -a /etc/shells >/dev/null
  sudo chsh -s "$(which zsh)" "$USER"
} && run 'changeLoginShell' '## üêö Change login shell to Zsh'

restoreLaunchpad() {
  lporg save -c="$TMPDIR/lporg.yml" &>/dev/null
  if (diff "$data/lporg.yml" "$TMPDIR/lporg.yml" &>/dev/null || ! shouldProceed); then
    skip
  fi

  # shellcheck disable=SC2016
  gum run 'Running `lporg load`...' -- lporg load -nyc="$data/lporg.yml" >/dev/null || :
} && run 'restoreLaunchpad' '## üöÄ Restore Launchpad and Dock' true

restoreAppSettings() {
  if [[ -z "$(mackup -n backup 2>/dev/null)" && $? ]] || ! shouldProceed; then
    skip
  fi

  mackup restore
} && run 'restoreAppSettings' '## üíæ Restore application settings' true

restoreAppShortcuts() {
  if (defaults read com.apple.universalaccess com.apple.custommenu.apps &>/dev/null || ! shouldProceed); then
    skip
  fi

  # shellcheck disable=SC2016
  gum run 'Running `mksei load`...' -- mksei load "$data/keyboard_shortcuts.json"
} && run 'restoreAppShortcuts' '## ‚å®Ô∏è Restore App Shortcuts' true

restoreLoginItems() {
  if (! has mli || mli check --file="$data/login_items.json" &>/dev/null || ! shouldProceed); then
    skip
  fi

  # shellcheck disable=SC2016
  gum run 'Running `mli load`...' -- mli load --file="$data/login_items.json"
} && run 'restoreLoginItems' '## üìë Restore Login Items' true

limitBatteryCharge() {
  if (! has bclm_loop || ! shouldProceed); then
    skip
  fi

  sudo bclm_loop persist
} && run 'limitBatteryCharge' '## üîã Limit battery charge' true

generateGitHooks() {
  if [[ -f "$XDG_CONFIG_HOME/git/hooks/pre-commit" && -f "$XDG_CONFIG_HOME/git/hooks/commit-msg" ]] || ! shouldProceed; then
    skip
  fi

  prek init-template-dir "$XDG_CONFIG_HOME/git" -c="$data/pre-commit.yml"
  gitlint --target="$dotfiles" install-hook
} && run 'generateGitHooks' '## ü™ù Generate Git Hooks for pre-commit and commit-msg'

loginGitHubCli() {
  if (gh auth status &>/dev/null || ! shouldProceed); then
    skip
  fi

  gh auth login -p='SSH' -h='GitHub.com' -s='codespace,delete_repo,workflow' --skip-ssh-key -w
} && run 'loginGitHubCli' '## üêô Log in to GitHub CLI'

installProgrammingLanguages() {
  eval "$(mise activate -q zsh)"
  if [[ -z "$(mise ls --missing)" ]] || ! shouldProceed; then
    skip
  fi

  mise install
} && run 'installProgrammingLanguages' '## üìº Install programming languages'

installVimPlugins() {
  if [[ -d "$XDG_DATA_HOME/vim/pack/jetpack/opt" ]] || ! shouldProceed; then
    skip
  fi


  vim +Jetpack +qall
  gum run 'Building a binary of vim-lumen...' -- vim +qall!
} && run 'installVimPlugins' '## üñå Install Vim plugins'


if ($executed); then
  (isDarwin) && killall Dock SystemUIServer
  gum format '# üéâ Setup completed!'
else
  gum format '# üßä Nothing has changed'
fi
