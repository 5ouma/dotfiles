#!/usr/bin/env zsh

#==================================================[ Settings ]==================================================#

zstyle ":completion:*:commands" rehash 1

#==================================================[ Variables ]==================================================#

[ -z "$dotfiles" ] && declare -r dotfiles="$HOME/.dotfiles"
declare -r packages="$dotfiles/packages"
declare -r data="$dotfiles/data"
declare -r scripts="$dotfiles/scripts"
export -r ZDOTDIR="$HOME/.zsh"

declare doAll=false
declare notSetup=true
declare doneAnything=false
declare nowNum=1
[ -e "$HOME/.dotfiles" ] && declare -r allNum=$(($(grep -o "echoNumber" "$dotfiles/scripts"/* | wc -l)))

#==================================================[ Functions ]==================================================#

getColor() {
  case "$1" in
    red) echo -n 31 ;;
    green) echo -n 32 ;;
    yellow) echo -n 33 ;;
    blue) echo -n 34 ;;
    cyan) echo -n 36 ;;
    gray) echo -n 90 ;;
  esac
}

printc() {
  declare -r color="$(getColor "$1")"
  [ "$2" = true ] && declare -r isBold=1 || declare -r isBold=0
  printf "\033[%s;%sm%s\033[m" "$isBold" "$color" "$3"
}

printOpt() {
  printf "  %s, %s%s\n" "$(printc green false "-$1")" "$(printc green false "--$2")" "$3"
}

echoAsk() {
  printf "$(printc blue true "ask") %s: " "$1"
}

echoQue() {
  printf "$(printc gray true "question") %s: " "$1"
}

echoInfo() {
  printf "$(printc cyan true "info") %s\n" "$1"
}

echoWarning() {
  printf "$(printc yellow true "warning") %s\n" "$1"
}

echoResult() {
  if [[ $? = 0 ]]; then
    printf "$(printc green false "success") %s\n" "$1"
    doneAnything=true
  else
    printf "$(printc red false "error") %s\n" "$2"
  fi
}

echoNumber() {
  printf "$(printc gray false "[$nowNum/$allNum]") %s\n" "$1"
  ((nowNum++))
}

echoDone() {
  newLine
  print "âœ¨ Setting up successfully!"
}

newLine() {
  echo
}

waitInput() {
  echoAsk "$1 (y/n/other to abort)"
  read -rk 1 run
  newLine
  if [[ "$run" =~ "y|Y" ]]; then
    return 0
  elif [[ "$run" =~ "n|N" ]]; then
    ((nowNum+=$(grep -o "echoNumber" "$2" | wc -l)))
    return 1
  else
    if "$doneAnything"; then
      echoDone
    else
      newLine
      echoWarning "Nothing has changed."
    fi
    exec $SHELL -l
  fi
}

waitReturn() {
  print "Press RETURN to continue"
  read -rs
}

makeSymlink() {
  while read -r pack; do
    local homeFile homeDir >/dev/null 2>&1
    homeFile="$2/$(echo "$pack" | sed -r "s/.*$(basename "$1")\/[^\/]*\///")"
    homeDir=$(dirname "$homeFile")
    if [[ -e "$homeFile" && -n $(diff "$pack" "$homeFile") ]]; then
      mkdir -p "$(dirname "$1")/backup"
      mv "$homeFile" "$(dirname "$1")/backup/"
    fi
    if [[ ! -e "$homeFile" || -n $(diff "$pack" "$homeFile") ]]; then
      mkdir -p "$homeDir"
      ln -s -v "$pack" "$homeDir"
        notSetup=false
    fi
  done < <(find "$1" -type f ! -name ".DS_Store")
}

makeFile() {
  for target in "$@"; do
    if [[ ! -e "$target" ]]; then
      touch "$target"
      print "$target"
        notSetup=false
    fi
  done
}

makeDir() {
  for target in "$@"; do
    if [[ ! -e "$target" ]]; then
      mkdir -p "$target"
      print "$target"
        notSetup=false
    fi
  done
}

setFiles() {
  makeSymlink "$packages" "$HOME"
  makeDir "$HOME/.vim/undo" "$HOME/.ssh/git"
  makeFile "$HOME/.hushlogin"
  if ! "$notSetup"; then
    echoResult "Set these files!" "Setting files is failed."
      sleep 1
  else
    echoWarning "All files are already set."
      sleep 0.5
  fi
}

#==================================================[ Options ]==================================================#

case "$1" in
  "-h" | "--help")
    print "$(printc green false "dotfiles")"
    print "My zsh, vim and other settings, plugins, etc and setup."
    newLine
    print "$(printc yellow false "USAGE:")"
    print "  setup"
    newLine
    print "$(printc yellow false "OPTIONS:")"
    printOpt "h" "help" "    Print help information"
    printOpt "y" "yes" "     Run all configuration"
    printOpt "s" "set" "     Set files to home directory"
    exec $SHELL -l
    ;;

  "-y" | "--yes")
    doAll=true
    ;;

  "-s" | "--set")
    setFiles
    exec $SHELL -l
    ;;
esac

#==================================================[ Ask to confirm ]==================================================#

echoAsk "Are you sure to start setup? (y/n)"
read -rq && newLine || { newLine; exec $SHELL -l; }

#==================================================[ Clone repository ]==================================================#

if [[ ! -e "$HOME/.dotfiles" ]]; then
  echoInfo "Cloning repository into \`~/.dotfiles\`..."
  git clone -q https://github.com/5ouma/dotfiles.git "$dotfiles"
  declare -r allNum=$(($(grep -o "echoNumber" "$dotfiles/scripts"/* | wc -l)))
fi
newLine

#==================================================[ Apply preference ]==================================================#

# Homebrew
source "$scripts/homebrew.zsh"
newLine

# Set files and folders
source "$scripts/files.zsh"
newLine

# Defaults commands
source "$scripts/defaults.zsh"
newLine

# Apps and more
source "$scripts/apps.zsh"

#==================================================[ Done! ]==================================================#

if "$doneAnything"; then
  echoDone
else
  newLine
  echoWarning "Nothing has changed."
fi
